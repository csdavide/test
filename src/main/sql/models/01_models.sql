create table if not exists ecm_models (
    id int8 not null generated by default as identity,
    tenant varchar(255) not null,
    model_name varchar(255) not null,
    "data" text,
    fmt varchar(255),
    is_active bool not null,
    constraint ecm_models_pkey primary key (id),
    constraint ecm_models_uq unique (tenant, model_name)
);

create table if not exists ecm_archived_models (
    tenant varchar(255) not null,
    model_name varchar(255) not null,
    end_validity timestamptz not null,
    "data" text,
    fmt varchar(255),
    constraint ecm_archived_models_pkey primary key (tenant, model_name, end_validity)
);

create or replace function func_model_updated() returns trigger as
$$
begin
    insert into "{schema}".ecm_archived_models (tenant,model_name,end_validity,data,fmt) values (old.tenant,old.model_name,now(),old.data,old.fmt);
    return null;
end
$$
    language plpgsql;

drop trigger if exists tr_archived_models_updated on ecm_models;

create trigger tr_archived_models_updated
    after update of data on ecm_models
    for each row execute function func_model_updated();

drop trigger if exists tr_archived_models_deleted on ecm_models;

create trigger tr_archived_models_deleted
    after delete on ecm_models
    for each row execute function func_model_updated();
